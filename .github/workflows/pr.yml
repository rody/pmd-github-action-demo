name: 'pr'
on:
  - pull_request

jobs:
    check-ci:
      runs-on: ubuntu-latest
      steps:
        - name: Checkout Code
          uses: actions/checkout@v2

        - name: Java setup
          uses: actions/setup-java@v2
          with:
            distribution: temurin
            java-version: '11'

        - name: Cache PMD
          id: cache-pmd
          uses: actions/cache@v2
          with:
            path: |
              pmd-bin-6.41.0
              pmd.cache
            key: ${{ runner.os }}-pmd

        - name: Install PMD
          if: steps.cache-pmd.outputs.cache-hit != 'true'
          run: |
            if [ ! -d pmd-bin-6.41.0 ]; then
              curl -L "https://github.com/pmd/pmd/releases/download/pmd_releases/6.41.0/pmd-bin-6.41.0.zip" -o pmd-bin-6.41.0.zip
              unzip -q pmd-bin-6.41.0.zip
              rm -f pmd-bin-6.41.0.zip
            fi

        - name: Generate PMD Report
          run: |
            pmd-bin-6.41.0/bin/run.sh pmd --dir . --rulesets pmd-ruleset.xml --short-names --fail-on-violation false --report-file pmd-report.json --format sarif --cache pmd.cache

        - name: Setup Node
          uses: actions/setup-node@v2
          with:
            node-version: '16'
            # cache: 'npm'
        - run: npm install parse-diff

        - name: Publish annotations
          uses: actions/github-script@v5
          env:
            SARIF_REPORTS: pmd-report.json,eslint-report.json
          with:
            debug: true
            script: |
              const parse = require("parse-diff");
              const fs = require("fs");
              const path = require("path");
              const process = require("process");
              const os = require("os");

              const diff_url = context.payload.pull_request.diff_url;
              const diff = await github.request(diff_url);
              const diffFiles = parse(diff.data);

              const changedLines = {};

              for (const diffFile of diffFiles) {
                for (chunk of diffFile.chunks) {
                  for (change of chunk.changes) {
                    if (change.type == 'del') {
                      continue;
                    }
                    const lineNumber = change.ln1 || change.ln;

                    const lines = changedLines[diffFile.to] || [];
                    lines.push(lineNumber);
                    changedLines[diffFile.to] = lines;
                  }
                }
              }

              console.log(JSON.stringify(changedLines));

              const reports = process.env['SARIF_REPORTS'];
              const reportFiles = reports.split(',');


              for (const reportFile of reportFiles) {
                var report;
                try {
                  report = fs.readFileSync(reportFile, { encoding: 'utf8', flag: 'r' });
                } catch (err) {
                  console.log(`could not open file "${reportFile}", ${err}`);
                  continue;
                }

                const sarif = JSON.parse(report);

                for (const run of sarif.runs) {
                  const toolName = run.tool.driver.name;
                  const violations = [];

                  for (const result of run.results) {

                    for (location of result.locations) {
                      const filePath = location.physicalLocation.artifactLocation.uri;
                      const f = path.relative(process.cwd(), filePath);
                      const message = `${result.message.text}\nPriority: ${run.tool.driver.rules[result.ruleIndex].properties.priority}\n${f}`;

                      violations.push({
                        title: `[${toolName}] ${run.tool.driver.rules[result.ruleIndex].id}`,
                        file: f,
                        startLine: location.physicalLocation.region.startLine,
                        endLine: location.physicalLocation.region.endLine,
                        message: result.message.text,
                        ruleId: run.tool.driver.rules[result.ruleIndex].id,
                      });

                      // core.warning(`${result.message.text}\nPriority: ${run.tool.driver.rules[result.ruleIndex].properties.priority}\n${f}`, {
                      //   title: `[${toolName}] ${run.tool.driver.rules[result.ruleIndex].id}`,
                      //   file: f,
                      //   startLine: location.physicalLocation.region.startLine,
                      //   endLine: location.physicalLocation.region.startLine,
                      // });
                    }
                  }

                  const checkRun = {
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    name: toolName,
                    head_sha: ????,
                    status: 'completed',
                    conclusion: 'neutral',
                    output: {
                      title: `${toolName} check completed`,
                      summary: '????????',
                      annotations: [],
                    },
                  }

                  for (v of violations) {
                      output.annotations.push({
                        path: v.file,
                        start_line: v.startLine,
                        end_line: v.startLine,
                        annotation_level: 'warning',
                        message: v.message,
                        title: `${toolName} - ${v.ruleId}`,
                      });
                  }

                  console.log(JSON.stringify(checkRun));

                }
              }
